#Problem 3 - Huffman Encoding/Decoding
My solution is as follows: To encode a string, first calculate the frequency of each letter. A binary tree is generated by taking two minimum values from the heap and adding the newly created nodes back into the heap.
Then I map from the tree, the keys are labels or characters from the tree. The final encoding, traversing each key in the string, taking the binary values from the map, and then joining them together. Decode, iterate through each "bit" in the binary string and append values when traversing the tree.
Time complexity :O(n)
Space complexity :O(n) The n represents the number of characters in the input data when all the characters are distinct in worst-case.